Requirement already satisfied: torchvision in ./.local/lib/python3.7/site-packages (0.5.0)
Requirement already satisfied: pillow>=4.1.1 in ./.local/lib/python3.7/site-packages (from torchvision) (7.0.0)
Requirement already satisfied: torch==1.4.0 in ./.local/lib/python3.7/site-packages (from torchvision) (1.4.0)
Requirement already satisfied: six in /apps/skylake/software/Python/3.7.4-GCCcore-8.3.0/lib/python3.7/site-packages (from torchvision) (1.12.0)
Requirement already satisfied: numpy in ./.local/lib/python3.7/site-packages (from torchvision) (1.18.1)
Requirement already satisfied: scipy in ./.local/lib/python3.7/site-packages (1.4.1)
Requirement already satisfied: numpy>=1.13.3 in ./.local/lib/python3.7/site-packages (from scipy) (1.18.1)
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 13, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=13, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
  car plane   dog   cat
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model resnet152 Loaded
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer2): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (4): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (5): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (6): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (7): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer3): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (4): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (5): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (6): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (7): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (8): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (9): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (10): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (11): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (12): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (13): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (14): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (15): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (16): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (17): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (18): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (19): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (20): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (21): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (22): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (23): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (24): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (25): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (26): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (27): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (28): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (29): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (30): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (31): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (32): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (33): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (34): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (35): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer4): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=2048, out_features=1000, bias=True)
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581698654.1932309
[1,   500] loss: 1.816
31.324061632156372
[1,  1000] loss: 1.809
62.09207582473755
[1,  1500] loss: 1.816
92.855553150177
[1,  2000] loss: 1.817
124.06541895866394
[1,  2500] loss: 1.813
154.39387106895447
[1,  3000] loss: 1.819
185.27461051940918
[1,  3500] loss: 1.817
215.56673669815063
[1,  4000] loss: 1.816
245.87657189369202
[1,  4500] loss: 1.811
276.35813665390015
[1,  5000] loss: 1.812
306.5472626686096
[1,  5500] loss: 1.816
336.525244474411
[1,  6000] loss: 1.802
366.39947986602783
[1,  6500] loss: 1.814
396.09954023361206
[1,  7000] loss: 1.821
425.8826479911804
[1,  7500] loss: 1.815
455.5392255783081
[1,  8000] loss: 1.816
485.5642535686493
[1,  8500] loss: 1.815
515.5832102298737
[1,  9000] loss: 1.811
545.531064748764
[1,  9500] loss: 1.814
575.6437318325043
[1, 10000] loss: 1.809
605.5160958766937
[1, 10500] loss: 1.809
636.3370585441589
[1, 11000] loss: 1.821
666.0317571163177
[1, 11500] loss: 1.816
696.5357184410095
[1, 12000] loss: 1.817
726.7511022090912
[1, 12500] loss: 1.812
756.8388137817383
[2,   500] loss: 1.815
787.4934504032135
[2,  1000] loss: 1.816
817.7518706321716
[2,  1500] loss: 1.820
848.092081785202
[2,  2000] loss: 1.804
878.0353536605835
[2,  2500] loss: 1.811
908.4090323448181
[2,  3000] loss: 1.808
938.5668804645538
[2,  3500] loss: 1.815
969.1733839511871
[2,  4000] loss: 1.825
999.7021973133087
[2,  4500] loss: 1.812
1029.9299221038818
[2,  5000] loss: 1.818
1059.7720971107483
[2,  5500] loss: 1.818
1090.0024030208588
[2,  6000] loss: 1.803
1120.072253227234
[2,  6500] loss: 1.812
1150.4352161884308
[2,  7000] loss: 1.808
1180.872745513916
[2,  7500] loss: 1.811
1211.2982890605927
[2,  8000] loss: 1.813
1241.4644932746887
[2,  8500] loss: 1.815
1271.7748279571533
[2,  9000] loss: 1.820
1301.669177055359
[2,  9500] loss: 1.818
1331.8302128314972
[2, 10000] loss: 1.817
1361.975117444992
[2, 10500] loss: 1.822
1392.624596118927
[2, 11000] loss: 1.820
1422.8122792243958
[2, 11500] loss: 1.817
1453.8733232021332
[2, 12000] loss: 1.815
1484.5433435440063
[2, 12500] loss: 1.811
1515.3407537937164
[3,   500] loss: 1.811
1545.928725719452
[3,  1000] loss: 1.822
1576.733604669571
[3,  1500] loss: 1.815
1607.2832746505737
[3,  2000] loss: 1.817
1637.93194937706
[3,  2500] loss: 1.814
1668.4039459228516
[3,  3000] loss: 1.813
1698.733395576477
[3,  3500] loss: 1.818
1729.5344877243042
[3,  4000] loss: 1.805
1760.7639961242676
[3,  4500] loss: 1.824
1791.533433675766
[3,  5000] loss: 1.817
1822.4129230976105
[3,  5500] loss: 1.818
1853.0563232898712
[3,  6000] loss: 1.813
1883.0336253643036
[3,  6500] loss: 1.811
1914.1157751083374
[3,  7000] loss: 1.809
1944.5634021759033
[3,  7500] loss: 1.811
1975.3905806541443
[3,  8000] loss: 1.813
2006.7427744865417
[3,  8500] loss: 1.802
2037.1219882965088
[3,  9000] loss: 1.807
2067.997116804123
[3,  9500] loss: 1.818
2098.8039746284485
[3, 10000] loss: 1.807
2129.1759243011475
[3, 10500] loss: 1.824
2159.731474876404
[3, 11000] loss: 1.816
2190.2244477272034
[3, 11500] loss: 1.811
2221.118164539337
[3, 12000] loss: 1.809
2251.4773852825165
[3, 12500] loss: 1.812
2281.9988906383514
[4,   500] loss: 1.818
2312.4195630550385
[4,  1000] loss: 1.812
2342.872036933899
[4,  1500] loss: 1.824
2372.9894013404846
[4,  2000] loss: 1.804
2403.5504450798035
[4,  2500] loss: 1.826
2434.717292070389
[4,  3000] loss: 1.814
2465.3569695949554
[4,  3500] loss: 1.813
2495.7123041152954
[4,  4000] loss: 1.811
2525.8643822669983
[4,  4500] loss: 1.817
2555.9655458927155
[4,  5000] loss: 1.815
2586.069737672806
[4,  5500] loss: 1.819
2616.165112733841
[4,  6000] loss: 1.818
2646.782510280609
[4,  6500] loss: 1.814
2677.4463546276093
[4,  7000] loss: 1.809
2707.682614326477
[4,  7500] loss: 1.813
2737.5592362880707
[4,  8000] loss: 1.820
2768.348433494568
[4,  8500] loss: 1.815
2799.5356364250183
[4,  9000] loss: 1.807
2830.242579460144
[4,  9500] loss: 1.822
2860.3372156620026
[4, 10000] loss: 1.820
2890.49374461174
[4, 10500] loss: 1.801
2920.4200088977814
[4, 11000] loss: 1.823
2950.46302819252
[4, 11500] loss: 1.815
2980.3864114284515
[4, 12000] loss: 1.810
3010.368135690689
[4, 12500] loss: 1.813
3040.417136192322
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[ 0.6847,  0.0574, -0.9515,  ...,  0.9480, -0.1922,  0.6709],
        [ 0.7119, -1.2255, -0.0574,  ...,  1.0000,  0.8027, -0.7343],
        [ 0.1767,  0.4038, -1.0283,  ...,  0.9606, -0.9468, -0.0892],
        [-0.4912, -0.6296, -1.4082,  ..., -0.5158, -0.0479, -0.7014]],
       device='cuda:0', grad_fn=<AddmmBackward>)
Traceback (most recent call last):
  File "./main.py", line 339, in <module>
    test(model_names[model_archi])
  File "./main.py", line 248, in test
    for j in range(4)))
  File "./main.py", line 248, in <genexpr>
    for j in range(4)))
IndexError: tuple index out of range
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 14, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=14, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
  car plane   dog plane
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model resnet18 Loaded
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=512, out_features=1000, bias=True)
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581701706.3770635
[1,   500] loss: 0.651
5.3580968379974365
[1,  1000] loss: 0.652
10.485644817352295
[1,  1500] loss: 0.653
15.144453287124634
[1,  2000] loss: 0.653
19.721109867095947
[1,  2500] loss: 0.659
24.289517879486084
[1,  3000] loss: 0.656
28.846120357513428
[1,  3500] loss: 0.660
33.40065598487854
[1,  4000] loss: 0.654
37.97594881057739
[1,  4500] loss: 0.647
42.523775577545166
[1,  5000] loss: 0.660
47.09582567214966
[1,  5500] loss: 0.657
51.645500898361206
[1,  6000] loss: 0.655
56.26512908935547
[1,  6500] loss: 0.655
60.82241868972778
[1,  7000] loss: 0.655
65.39393138885498
[1,  7500] loss: 0.655
70.15764832496643
[1,  8000] loss: 0.653
75.15933346748352
[1,  8500] loss: 0.651
79.69860363006592
[1,  9000] loss: 0.656
84.29305076599121
[1,  9500] loss: 0.649
88.85562539100647
[1, 10000] loss: 0.660
93.52375507354736
[1, 10500] loss: 0.648
98.13980460166931
[1, 11000] loss: 0.647
102.7705717086792
[1, 11500] loss: 0.655
107.34651756286621
[1, 12000] loss: 0.656
112.17230987548828
[1, 12500] loss: 0.656
116.745676279068
[2,   500] loss: 0.649
121.39513874053955
[2,  1000] loss: 0.655
125.94460153579712
[2,  1500] loss: 0.659
130.55186343193054
[2,  2000] loss: 0.655
135.1246519088745
[2,  2500] loss: 0.653
139.86530804634094
[2,  3000] loss: 0.657
144.5311243534088
[2,  3500] loss: 0.653
149.17307329177856
[2,  4000] loss: 0.657
153.75458431243896
[2,  4500] loss: 0.656
158.2675337791443
[2,  5000] loss: 0.655
162.80158472061157
[2,  5500] loss: 0.652
167.28821182250977
[2,  6000] loss: 0.658
171.73426699638367
[2,  6500] loss: 0.660
176.3621027469635
[2,  7000] loss: 0.654
181.02580952644348
[2,  7500] loss: 0.654
185.5817768573761
[2,  8000] loss: 0.648
190.17116117477417
[2,  8500] loss: 0.656
194.83433055877686
[2,  9000] loss: 0.656
199.42930364608765
[2,  9500] loss: 0.655
204.02561020851135
[2, 10000] loss: 0.645
208.61558866500854
[2, 10500] loss: 0.656
213.26015400886536
[2, 11000] loss: 0.661
217.83386707305908
[2, 11500] loss: 0.662
222.34629654884338
[2, 12000] loss: 0.658
227.00913286209106
[2, 12500] loss: 0.657
231.7888286113739
[3,   500] loss: 0.659
236.54894757270813
[3,  1000] loss: 0.652
241.18585920333862
[3,  1500] loss: 0.655
245.78697896003723
[3,  2000] loss: 0.653
250.42039251327515
[3,  2500] loss: 0.655
255.18436241149902
[3,  3000] loss: 0.655
259.7573413848877
[3,  3500] loss: 0.655
264.3543441295624
[3,  4000] loss: 0.658
268.9675736427307
[3,  4500] loss: 0.657
273.6008505821228
[3,  5000] loss: 0.662
278.1909108161926
[3,  5500] loss: 0.653
282.8662459850311
[3,  6000] loss: 0.660
287.4709687232971
[3,  6500] loss: 0.658
292.06210947036743
[3,  7000] loss: 0.657
296.7006959915161
[3,  7500] loss: 0.654
301.30410718917847
[3,  8000] loss: 0.653
305.8439075946808
[3,  8500] loss: 0.651
310.441694021225
[3,  9000] loss: 0.657
315.020476102829
[3,  9500] loss: 0.654
319.56785225868225
[3, 10000] loss: 0.658
324.05832266807556
[3, 10500] loss: 0.657
328.60646390914917
[3, 11000] loss: 0.657
333.15354084968567
[3, 11500] loss: 0.660
337.7536029815674
[3, 12000] loss: 0.655
342.3980631828308
[3, 12500] loss: 0.651
346.96877813339233
[4,   500] loss: 0.654
351.70974588394165
[4,  1000] loss: 0.657
356.34230613708496
[4,  1500] loss: 0.654
360.9553220272064
[4,  2000] loss: 0.656
365.5371334552765
[4,  2500] loss: 0.658
370.1496031284332
[4,  3000] loss: 0.655
374.7497639656067
[4,  3500] loss: 0.660
379.2955832481384
[4,  4000] loss: 0.661
383.92378211021423
[4,  4500] loss: 0.656
388.5425269603729
[4,  5000] loss: 0.662
393.2659387588501
[4,  5500] loss: 0.651
397.8957860469818
[4,  6000] loss: 0.649
402.5539183616638
[4,  6500] loss: 0.654
407.2055974006653
[4,  7000] loss: 0.656
411.84096908569336
[4,  7500] loss: 0.651
416.4178385734558
[4,  8000] loss: 0.647
420.919296503067
[4,  8500] loss: 0.654
425.46008563041687
[4,  9000] loss: 0.657
430.001704454422
[4,  9500] loss: 0.660
434.53951597213745
[4, 10000] loss: 0.656
439.1314916610718
[4, 10500] loss: 0.654
443.7878842353821
[4, 11000] loss: 0.659
448.361145734787
[4, 11500] loss: 0.650
452.96800446510315
[4, 12000] loss: 0.655
457.5696346759796
[4, 12500] loss: 0.645
462.13226342201233
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[ 0.3551,  0.6709,  1.0298, -1.0638,  0.3172, -0.9441, -0.7989,  0.3650,
         -0.6103, -0.4183],
        [ 0.0173,  0.5611,  1.5308,  0.2306,  0.5240, -0.1170, -0.1351, -1.4019,
         -0.3397, -0.6986],
        [ 0.5625,  1.3170,  0.2887,  0.2146,  1.4849, -0.9533,  0.3801,  0.4759,
          0.5755, -0.9754],
        [ 0.6571,  0.8910,  1.1730, -1.0377, -0.5106, -0.0627, -0.7688,  0.6394,
         -0.7773, -1.1264]], device='cuda:0', grad_fn=<AddmmBackward>)
Predicted:   bird  bird  deer  bird
Accuracy of the network on the 4000.0 test images: 10 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 15, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=15, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
  cat  ship  ship   car
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model resnet34 Loaded
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (3): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (3): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (5): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=512, out_features=1000, bias=True)
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581702187.6847663
[1,   500] loss: 0.731
8.015689611434937
[1,  1000] loss: 0.726
15.654726266860962
[1,  1500] loss: 0.724
23.37346315383911
[1,  2000] loss: 0.728
30.95458221435547
[1,  2500] loss: 0.731
38.4559223651886
[1,  3000] loss: 0.730
46.0781683921814
[1,  3500] loss: 0.736
53.674782276153564
[1,  4000] loss: 0.741
61.28260254859924
[1,  4500] loss: 0.725
68.847989320755
[1,  5000] loss: 0.727
76.41581153869629
[1,  5500] loss: 0.733
83.92462539672852
[1,  6000] loss: 0.728
91.47770595550537
[1,  6500] loss: 0.719
99.12789869308472
[1,  7000] loss: 0.722
106.6022834777832
[1,  7500] loss: 0.723
114.26025056838989
[1,  8000] loss: 0.737
121.90060806274414
[1,  8500] loss: 0.721
129.49642252922058
[1,  9000] loss: 0.735
137.07762360572815
[1,  9500] loss: 0.728
144.630028963089
[1, 10000] loss: 0.729
152.1857008934021
[1, 10500] loss: 0.730
160.1035556793213
[1, 11000] loss: 0.731
167.71425104141235
[1, 11500] loss: 0.740
175.30469036102295
[1, 12000] loss: 0.721
182.86537551879883
[1, 12500] loss: 0.744
190.56686520576477
[2,   500] loss: 0.724
198.35506224632263
[2,  1000] loss: 0.733
205.87996220588684
[2,  1500] loss: 0.730
213.42603039741516
[2,  2000] loss: 0.732
220.9751477241516
[2,  2500] loss: 0.734
228.51024651527405
[2,  3000] loss: 0.736
236.15747237205505
[2,  3500] loss: 0.726
243.70537328720093
[2,  4000] loss: 0.728
251.2958574295044
[2,  4500] loss: 0.724
258.9452226161957
[2,  5000] loss: 0.733
266.5973393917084
[2,  5500] loss: 0.737
274.2761433124542
[2,  6000] loss: 0.729
281.80073833465576
[2,  6500] loss: 0.722
289.45003271102905
[2,  7000] loss: 0.734
297.04696106910706
[2,  7500] loss: 0.733
304.58749556541443
[2,  8000] loss: 0.733
312.09097504615784
[2,  8500] loss: 0.730
319.7691738605499
[2,  9000] loss: 0.721
327.5175476074219
[2,  9500] loss: 0.729
335.0791940689087
[2, 10000] loss: 0.728
342.490131855011
[2, 10500] loss: 0.728
350.0758686065674
[2, 11000] loss: 0.739
357.6780722141266
[2, 11500] loss: 0.722
365.1870369911194
[2, 12000] loss: 0.729
372.76331520080566
[2, 12500] loss: 0.726
380.2551875114441
[3,   500] loss: 0.723
388.23585748672485
[3,  1000] loss: 0.737
395.833163022995
[3,  1500] loss: 0.734
403.55795407295227
[3,  2000] loss: 0.719
411.4752206802368
[3,  2500] loss: 0.731
419.55112886428833
[3,  3000] loss: 0.729
427.093209028244
[3,  3500] loss: 0.724
434.7281186580658
[3,  4000] loss: 0.717
442.26460003852844
[3,  4500] loss: 0.718
450.10336685180664
[3,  5000] loss: 0.733
457.67408180236816
[3,  5500] loss: 0.715
465.2227416038513
[3,  6000] loss: 0.717
472.77807688713074
[3,  6500] loss: 0.726
480.3489787578583
[3,  7000] loss: 0.741
487.95959639549255
[3,  7500] loss: 0.730
495.746248960495
[3,  8000] loss: 0.730
503.26732993125916
[3,  8500] loss: 0.734
510.88776445388794
[3,  9000] loss: 0.729
518.4864592552185
[3,  9500] loss: 0.735
526.0072884559631
[3, 10000] loss: 0.737
533.7202351093292
[3, 10500] loss: 0.724
541.4089238643646
[3, 11000] loss: 0.732
549.004035949707
[3, 11500] loss: 0.734
556.6629700660706
[3, 12000] loss: 0.725
564.2029044628143
[3, 12500] loss: 0.730
572.0522768497467
[4,   500] loss: 0.733
580.2496371269226
[4,  1000] loss: 0.727
587.737993478775
[4,  1500] loss: 0.733
595.5100677013397
[4,  2000] loss: 0.736
603.1346833705902
[4,  2500] loss: 0.728
610.648223400116
[4,  3000] loss: 0.739
618.1223466396332
[4,  3500] loss: 0.725
625.7730739116669
[4,  4000] loss: 0.725
633.4867510795593
[4,  4500] loss: 0.734
641.0251929759979
[4,  5000] loss: 0.722
648.5504174232483
[4,  5500] loss: 0.728
656.1226809024811
[4,  6000] loss: 0.720
663.6670417785645
[4,  6500] loss: 0.724
671.2628135681152
[4,  7000] loss: 0.728
678.8595869541168
[4,  7500] loss: 0.741
686.3750870227814
[4,  8000] loss: 0.722
693.9167723655701
[4,  8500] loss: 0.738
701.4545068740845
[4,  9000] loss: 0.726
709.0639638900757
[4,  9500] loss: 0.733
716.7040100097656
[4, 10000] loss: 0.726
724.3222932815552
[4, 10500] loss: 0.730
731.890953540802
[4, 11000] loss: 0.721
739.4757080078125
[4, 11500] loss: 0.733
747.0861172676086
[4, 12000] loss: 0.732
754.5982058048248
[4, 12500] loss: 0.725
762.1029064655304
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[-1.2149,  0.5123,  2.8041, -0.3057,  1.0238, -1.6516, -0.7577, -0.7302,
         -0.8014, -0.4953],
        [-0.3508,  1.1611,  1.1930,  1.2651, -0.7526, -1.6111,  0.7366,  0.2670,
          0.4517, -1.3055],
        [ 0.8501,  1.3134,  1.7658, -1.3154,  1.4151, -0.2467, -3.3553, -0.8814,
          0.5553, -1.2910],
        [-0.4422,  0.9155,  0.7870, -1.5517,  0.0993,  0.2554, -0.8710, -1.2395,
          1.1720,  0.3093]], device='cuda:0', grad_fn=<AddmmBackward>)
Predicted:   bird   cat  bird  ship
Accuracy of the network on the 4000.0 test images: 10 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 16, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=16, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
truck   cat truck  bird
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model resnet50 Loaded
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer2): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer3): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (4): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (5): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer4): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=2048, out_features=1000, bias=True)
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581702975.8259604
[1,   500] loss: 0.657
11.32306957244873
[1,  1000] loss: 0.657
22.00069308280945
[1,  1500] loss: 0.659
32.85746097564697
[1,  2000] loss: 0.670
43.77459669113159
[1,  2500] loss: 0.661
54.84068822860718
[1,  3000] loss: 0.658
65.53301954269409
[1,  3500] loss: 0.664
76.32664275169373
[1,  4000] loss: 0.658
87.05051040649414
[1,  4500] loss: 0.665
97.93331742286682
[1,  5000] loss: 0.655
108.98709201812744
[1,  5500] loss: 0.664
119.92493796348572
[1,  6000] loss: 0.655
130.73758172988892
[1,  6500] loss: 0.667
141.5530970096588
[1,  7000] loss: 0.666
152.38903069496155
[1,  7500] loss: 0.658
163.1577684879303
[1,  8000] loss: 0.653
173.9605576992035
[1,  8500] loss: 0.659
184.84426355361938
[1,  9000] loss: 0.660
195.6914141178131
[1,  9500] loss: 0.657
206.38497471809387
[1, 10000] loss: 0.661
217.10269284248352
[1, 10500] loss: 0.657
228.03670072555542
[1, 11000] loss: 0.660
238.86250853538513
[1, 11500] loss: 0.656
249.74858832359314
[1, 12000] loss: 0.670
260.77955532073975
[1, 12500] loss: 0.658
271.5706627368927
[2,   500] loss: 0.664
282.53373646736145
[2,  1000] loss: 0.664
293.3495945930481
[2,  1500] loss: 0.659
304.1305556297302
[2,  2000] loss: 0.665
315.14558267593384
[2,  2500] loss: 0.666
325.9268310070038
[2,  3000] loss: 0.662
336.9309186935425
[2,  3500] loss: 0.664
347.70127606391907
[2,  4000] loss: 0.662
358.7779381275177
[2,  4500] loss: 0.665
369.82580852508545
[2,  5000] loss: 0.656
380.6055688858032
[2,  5500] loss: 0.663
391.3723475933075
[2,  6000] loss: 0.654
402.11241340637207
[2,  6500] loss: 0.665
412.9482409954071
[2,  7000] loss: 0.658
423.8663475513458
[2,  7500] loss: 0.664
434.6838800907135
[2,  8000] loss: 0.663
445.40197229385376
[2,  8500] loss: 0.665
456.1352074146271
[2,  9000] loss: 0.659
467.06610131263733
[2,  9500] loss: 0.658
477.8869104385376
[2, 10000] loss: 0.663
488.66142892837524
[2, 10500] loss: 0.663
499.53325486183167
[2, 11000] loss: 0.651
510.2880415916443
[2, 11500] loss: 0.655
521.0027103424072
[2, 12000] loss: 0.654
531.7846002578735
[2, 12500] loss: 0.656
542.5099618434906
[3,   500] loss: 0.661
553.3530867099762
[3,  1000] loss: 0.660
564.2037382125854
[3,  1500] loss: 0.663
574.9353184700012
[3,  2000] loss: 0.660
585.7154574394226
[3,  2500] loss: 0.664
596.5919997692108
[3,  3000] loss: 0.666
607.3771576881409
[3,  3500] loss: 0.662
618.1183135509491
[3,  4000] loss: 0.662
628.828696012497
[3,  4500] loss: 0.658
639.6153664588928
[3,  5000] loss: 0.667
650.5005812644958
[3,  5500] loss: 0.655
661.2609543800354
[3,  6000] loss: 0.657
672.0253307819366
[3,  6500] loss: 0.660
682.916435956955
[3,  7000] loss: 0.658
693.5802080631256
[3,  7500] loss: 0.668
704.2304992675781
[3,  8000] loss: 0.666
715.1934523582458
[3,  8500] loss: 0.660
725.981137752533
[3,  9000] loss: 0.661
736.7744164466858
[3,  9500] loss: 0.669
747.5740783214569
[3, 10000] loss: 0.663
758.3331243991852
[3, 10500] loss: 0.660
769.3370518684387
[3, 11000] loss: 0.661
780.3857288360596
[3, 11500] loss: 0.664
791.115471124649
[3, 12000] loss: 0.662
801.9599351882935
[3, 12500] loss: 0.663
812.8442807197571
[4,   500] loss: 0.664
823.7884254455566
[4,  1000] loss: 0.656
835.0020799636841
[4,  1500] loss: 0.662
845.9441518783569
[4,  2000] loss: 0.654
856.7459716796875
[4,  2500] loss: 0.658
867.5075070858002
[4,  3000] loss: 0.663
878.2137968540192
[4,  3500] loss: 0.664
889.0997123718262
[4,  4000] loss: 0.661
900.0925493240356
[4,  4500] loss: 0.665
910.9202318191528
[4,  5000] loss: 0.661
921.7533295154572
[4,  5500] loss: 0.665
932.5480170249939
[4,  6000] loss: 0.668
943.291969537735
[4,  6500] loss: 0.668
954.1239242553711
[4,  7000] loss: 0.666
964.8686835765839
[4,  7500] loss: 0.662
975.6911399364471
[4,  8000] loss: 0.661
986.6449625492096
[4,  8500] loss: 0.655
997.42475938797
[4,  9000] loss: 0.658
1008.3844318389893
[4,  9500] loss: 0.652
1019.1675498485565
[4, 10000] loss: 0.659
1029.9068777561188
[4, 10500] loss: 0.656
1040.7385818958282
[4, 11000] loss: 0.657
1051.53071475029
[4, 11500] loss: 0.656
1062.3128051757812
[4, 12000] loss: 0.660
1073.3002092838287
[4, 12500] loss: 0.663
1084.2089641094208
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[ 1.2744,  0.9600,  1.2841,  0.0417,  0.7084,  0.4481, -1.3250,  0.6654,
          0.5875, -0.9808],
        [ 0.1904,  1.1205,  0.7773, -0.2490,  1.0417,  2.3646, -0.1985,  0.5659,
         -0.0991, -1.6342],
        [ 0.9428,  0.9449, -0.4861,  0.1906,  0.0062,  0.5851,  0.2374, -0.0385,
         -0.7989,  0.0812],
        [ 1.1277, -0.0825, -1.2905,  0.5486, -0.8441,  0.4319, -0.0282,  0.1320,
          0.5380, -1.7794]], device='cuda:0', grad_fn=<AddmmBackward>)
Predicted:   bird   dog   car plane
Accuracy of the network on the 4000.0 test images: 9 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 23, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=23, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
  car   cat horse plane
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model squeezenet1_0 Loaded
SqueezeNet(
  (features): Sequential(
    (0): Conv2d(3, 96, kernel_size=(7, 7), stride=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (3): Fire(
      (squeeze): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (4): Fire(
      (squeeze): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (5): Fire(
      (squeeze): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (6): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (7): Fire(
      (squeeze): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (8): Fire(
      (squeeze): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (9): Fire(
      (squeeze): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (10): Fire(
      (squeeze): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (11): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (12): Fire(
      (squeeze): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
  )
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Conv2d(512, 1000, kernel_size=(1, 1), stride=(1, 1))
    (2): ReLU(inplace=True)
    (3): AdaptiveAvgPool2d(output_size=(1, 1))
  )
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581704092.0899615
[1,   500] loss: 0.578
4.426681041717529
[1,  1000] loss: 0.581
9.148483276367188
[1,  1500] loss: 0.579
13.405125856399536
[1,  2000] loss: 0.580
17.640745878219604
[1,  2500] loss: 0.580
21.82965111732483
[1,  3000] loss: 0.581
25.993709564208984
[1,  3500] loss: 0.580
30.206537008285522
[1,  4000] loss: 0.579
34.36948490142822
[1,  4500] loss: 0.580
38.622541189193726
[1,  5000] loss: 0.579
42.81438946723938
[1,  5500] loss: 0.579
47.09585928916931
[1,  6000] loss: 0.580
51.26466083526611
[1,  6500] loss: 0.579
55.46365475654602
[1,  7000] loss: 0.579
59.671411991119385
[1,  7500] loss: 0.580
63.92622256278992
[1,  8000] loss: 0.579
68.49393439292908
[1,  8500] loss: 0.581
72.79330277442932
[1,  9000] loss: 0.579
77.07665681838989
[1,  9500] loss: 0.580
81.3158667087555
[1, 10000] loss: 0.579
85.91979026794434
[1, 10500] loss: 0.581
90.21144938468933
[1, 11000] loss: 0.579
94.41095852851868
[1, 11500] loss: 0.580
98.64131379127502
[1, 12000] loss: 0.579
102.84793782234192
[1, 12500] loss: 0.581
107.0368263721466
[2,   500] loss: 0.580
111.42029476165771
[2,  1000] loss: 0.580
115.66110825538635
[2,  1500] loss: 0.578
119.95896339416504
[2,  2000] loss: 0.580
124.19318270683289
[2,  2500] loss: 0.580
128.55275964736938
[2,  3000] loss: 0.581
132.75346636772156
[2,  3500] loss: 0.580
136.99273777008057
[2,  4000] loss: 0.580
141.24839305877686
[2,  4500] loss: 0.579
145.61550664901733
[2,  5000] loss: 0.579
149.79114532470703
[2,  5500] loss: 0.581
154.0249400138855
[2,  6000] loss: 0.580
158.32918787002563
[2,  6500] loss: 0.580
162.5714020729065
[2,  7000] loss: 0.580
166.88598084449768
[2,  7500] loss: 0.580
171.10021829605103
[2,  8000] loss: 0.579
175.30700516700745
[2,  8500] loss: 0.580
179.49909782409668
[2,  9000] loss: 0.579
183.67896485328674
[2,  9500] loss: 0.579
187.9255177974701
[2, 10000] loss: 0.579
192.21565532684326
[2, 10500] loss: 0.581
196.57230949401855
[2, 11000] loss: 0.578
200.8366961479187
[2, 11500] loss: 0.581
205.02936911582947
[2, 12000] loss: 0.580
209.2569284439087
[2, 12500] loss: 0.579
213.5852029323578
[3,   500] loss: 0.582
217.9854712486267
[3,  1000] loss: 0.580
222.1754229068756
[3,  1500] loss: 0.581
226.5160105228424
[3,  2000] loss: 0.579
230.68508052825928
[3,  2500] loss: 0.582
234.88427710533142
[3,  3000] loss: 0.579
239.0737543106079
[3,  3500] loss: 0.580
243.42027235031128
[3,  4000] loss: 0.579
247.63016510009766
[3,  4500] loss: 0.580
252.08810138702393
[3,  5000] loss: 0.580
256.48230051994324
[3,  5500] loss: 0.580
260.7505486011505
[3,  6000] loss: 0.581
265.37227606773376
[3,  6500] loss: 0.580
269.65702843666077
[3,  7000] loss: 0.582
273.84731006622314
[3,  7500] loss: 0.580
278.04066252708435
[3,  8000] loss: 0.580
282.2387502193451
[3,  8500] loss: 0.579
286.4544463157654
[3,  9000] loss: 0.580
290.6343493461609
[3,  9500] loss: 0.581
294.8402535915375
[3, 10000] loss: 0.579
299.0257315635681
[3, 10500] loss: 0.580
303.2866322994232
[3, 11000] loss: 0.579
307.53674960136414
[3, 11500] loss: 0.580
311.80536437034607
[3, 12000] loss: 0.581
316.02738904953003
[3, 12500] loss: 0.580
320.25488781929016
[4,   500] loss: 0.579
324.6016294956207
[4,  1000] loss: 0.581
328.8303201198578
[4,  1500] loss: 0.580
333.0562241077423
[4,  2000] loss: 0.579
337.247111082077
[4,  2500] loss: 0.581
341.637748003006
[4,  3000] loss: 0.580
345.822820186615
[4,  3500] loss: 0.580
350.0056371688843
[4,  4000] loss: 0.580
354.16607999801636
[4,  4500] loss: 0.579
358.5116057395935
[4,  5000] loss: 0.581
362.7200982570648
[4,  5500] loss: 0.580
366.95997071266174
[4,  6000] loss: 0.579
371.21949195861816
[4,  6500] loss: 0.577
375.4491527080536
[4,  7000] loss: 0.578
379.68315958976746
[4,  7500] loss: 0.581
383.87808299064636
[4,  8000] loss: 0.581
388.19975447654724
[4,  8500] loss: 0.580
392.4152388572693
[4,  9000] loss: 0.582
396.73505425453186
[4,  9500] loss: 0.579
401.0883107185364
[4, 10000] loss: 0.577
405.36727571487427
[4, 10500] loss: 0.579
409.5870683193207
[4, 11000] loss: 0.580
413.773047208786
[4, 11500] loss: 0.579
417.94116377830505
[4, 12000] loss: 0.579
422.1740372180939
[4, 12500] loss: 0.580
426.36421060562134
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[0.0000, 0.0000, 0.1175, 0.0000, 0.0000, 0.0040, 0.0000, 0.2680, 0.0000,
         0.2716],
        [0.0000, 0.0000, 0.2270, 0.0000, 0.2407, 0.1466, 0.0000, 0.0000, 0.2899,
         0.2365],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0856, 0.0000, 0.0000, 0.0000, 0.0000,
         0.1316],
        [0.2526, 0.0000, 0.4654, 0.0000, 0.2476, 0.0000, 0.0000, 0.0000, 0.1366,
         0.5676]], device='cuda:0', grad_fn=<ViewBackward>)
Predicted:  truck  ship truck truck
Accuracy of the network on the 4000.0 test images: 9 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 24, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=24, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
  dog truck   car  deer
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model squeezenet1_1 Loaded
SqueezeNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (3): Fire(
      (squeeze): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (4): Fire(
      (squeeze): Conv2d(128, 16, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(16, 64, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (6): Fire(
      (squeeze): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (7): Fire(
      (squeeze): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(32, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (8): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
    (9): Fire(
      (squeeze): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (10): Fire(
      (squeeze): Conv2d(384, 48, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(48, 192, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(48, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (11): Fire(
      (squeeze): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
    (12): Fire(
      (squeeze): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1))
      (squeeze_activation): ReLU(inplace=True)
      (expand1x1): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      (expand1x1_activation): ReLU(inplace=True)
      (expand3x3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (expand3x3_activation): ReLU(inplace=True)
    )
  )
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Conv2d(512, 1000, kernel_size=(1, 1), stride=(1, 1))
    (2): ReLU(inplace=True)
    (3): AdaptiveAvgPool2d(output_size=(1, 1))
  )
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581704535.4054968
[1,   500] loss: 0.579
4.354360103607178
[1,  1000] loss: 0.578
8.557179689407349
[1,  1500] loss: 0.579
12.759990453720093
[1,  2000] loss: 0.578
17.125259160995483
[1,  2500] loss: 0.578
21.40978217124939
[1,  3000] loss: 0.578
25.71408176422119
[1,  3500] loss: 0.580
30.02138924598694
[1,  4000] loss: 0.578
34.24177360534668
[1,  4500] loss: 0.577
38.4616117477417
[1,  5000] loss: 0.580
42.68647050857544
[1,  5500] loss: 0.578
46.87315225601196
[1,  6000] loss: 0.578
51.22200274467468
[1,  6500] loss: 0.577
55.438912868499756
[1,  7000] loss: 0.577
59.60544967651367
[1,  7500] loss: 0.578
63.85485649108887
[1,  8000] loss: 0.578
68.21357679367065
[1,  8500] loss: 0.578
72.40181708335876
[1,  9000] loss: 0.578
76.55600881576538
[1,  9500] loss: 0.578
80.77138352394104
[1, 10000] loss: 0.578
84.98161053657532
[1, 10500] loss: 0.577
89.19887590408325
[1, 11000] loss: 0.578
93.3617422580719
[1, 11500] loss: 0.578
97.54846858978271
[1, 12000] loss: 0.579
101.76906847953796
[1, 12500] loss: 0.579
105.94642376899719
[2,   500] loss: 0.579
110.24919867515564
[2,  1000] loss: 0.579
114.43923950195312
[2,  1500] loss: 0.578
118.61937808990479
[2,  2000] loss: 0.578
122.77088046073914
[2,  2500] loss: 0.577
126.90730953216553
[2,  3000] loss: 0.579
131.03281950950623
[2,  3500] loss: 0.579
135.2142035961151
[2,  4000] loss: 0.579
139.37180876731873
[2,  4500] loss: 0.577
143.57655572891235
[2,  5000] loss: 0.579
147.7680220603943
[2,  5500] loss: 0.578
151.9410138130188
[2,  6000] loss: 0.578
156.0833077430725
[2,  6500] loss: 0.578
160.29872369766235
[2,  7000] loss: 0.578
164.50858330726624
[2,  7500] loss: 0.578
168.84145760536194
[2,  8000] loss: 0.578
173.08284401893616
[2,  8500] loss: 0.578
177.3102080821991
[2,  9000] loss: 0.578
181.5147089958191
[2,  9500] loss: 0.577
185.73249101638794
[2, 10000] loss: 0.579
189.9500379562378
[2, 10500] loss: 0.577
194.14328026771545
[2, 11000] loss: 0.578
198.35625004768372
[2, 11500] loss: 0.577
202.5964879989624
[2, 12000] loss: 0.578
206.80669856071472
[2, 12500] loss: 0.578
210.98080730438232
[3,   500] loss: 0.579
215.2287893295288
[3,  1000] loss: 0.578
219.43399906158447
[3,  1500] loss: 0.577
223.63141345977783
[3,  2000] loss: 0.578
227.85999464988708
[3,  2500] loss: 0.579
231.98571228981018
[3,  3000] loss: 0.579
236.15930604934692
[3,  3500] loss: 0.579
240.4021875858307
[3,  4000] loss: 0.579
244.6138334274292
[3,  4500] loss: 0.578
248.81524848937988
[3,  5000] loss: 0.578
253.0379819869995
[3,  5500] loss: 0.578
257.24039125442505
[3,  6000] loss: 0.578
261.43858647346497
[3,  6500] loss: 0.578
265.6669909954071
[3,  7000] loss: 0.578
269.8706724643707
[3,  7500] loss: 0.578
274.01384687423706
[3,  8000] loss: 0.579
278.1877009868622
[3,  8500] loss: 0.577
282.38809752464294
[3,  9000] loss: 0.579
286.6417233943939
[3,  9500] loss: 0.578
290.938355922699
[3, 10000] loss: 0.579
295.1706976890564
[3, 10500] loss: 0.578
299.45591950416565
[3, 11000] loss: 0.578
303.6654050350189
[3, 11500] loss: 0.577
307.90188431739807
[3, 12000] loss: 0.576
312.1400349140167
[3, 12500] loss: 0.578
316.3836524486542
[4,   500] loss: 0.577
320.93289852142334
[4,  1000] loss: 0.578
325.2270860671997
[4,  1500] loss: 0.578
329.4219627380371
[4,  2000] loss: 0.579
333.6297359466553
[4,  2500] loss: 0.576
337.8146119117737
[4,  3000] loss: 0.578
342.0673415660858
[4,  3500] loss: 0.578
346.34076619148254
[4,  4000] loss: 0.578
350.6056373119354
[4,  4500] loss: 0.578
354.78104996681213
[4,  5000] loss: 0.578
358.9313151836395
[4,  5500] loss: 0.577
363.20769143104553
[4,  6000] loss: 0.577
367.43824791908264
[4,  6500] loss: 0.580
371.6290590763092
[4,  7000] loss: 0.578
375.8514099121094
[4,  7500] loss: 0.577
380.4772162437439
[4,  8000] loss: 0.578
384.6887364387512
[4,  8500] loss: 0.578
388.9157226085663
[4,  9000] loss: 0.579
393.1421003341675
[4,  9500] loss: 0.577
397.3758192062378
[4, 10000] loss: 0.577
401.6193883419037
[4, 10500] loss: 0.579
406.10750579833984
[4, 11000] loss: 0.578
410.30238699913025
[4, 11500] loss: 0.578
414.47983741760254
[4, 12000] loss: 0.577
418.70140194892883
[4, 12500] loss: 0.578
422.90860629081726
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[0.3821, 0.0000, 0.2612, 0.0000, 0.1734, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.4272, 0.0000, 0.1628, 0.0000, 0.0901, 0.0000, 0.0760, 0.0000, 0.1085,
         0.0000],
        [0.1402, 0.0986, 0.2140, 0.0000, 0.0000, 0.0000, 0.5198, 0.0000, 0.0000,
         0.0000],
        [0.4732, 0.1802, 0.1184, 0.0445, 0.0000, 0.0000, 0.3880, 0.0000, 0.0000,
         0.0000]], device='cuda:0', grad_fn=<ViewBackward>)
Predicted:  plane plane  frog plane
Accuracy of the network on the 4000.0 test images: 9 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 25, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=25, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
horse  deer   dog   cat
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model vgg11 Loaded
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (11): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): ReLU(inplace=True)
    (13): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (14): ReLU(inplace=True)
    (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (16): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (17): ReLU(inplace=True)
    (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (19): ReLU(inplace=True)
    (20): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581704976.8419433
[1,   500] loss: 0.576
3.9693808555603027
[1,  1000] loss: 0.576
7.864794492721558
[1,  1500] loss: 0.576
11.746315956115723
[1,  2000] loss: 0.576
15.611207008361816
[1,  2500] loss: 0.576
19.468671798706055
[1,  3000] loss: 0.576
23.340535640716553
[1,  3500] loss: 0.576
27.2156183719635
[1,  4000] loss: 0.576
31.069488048553467
[1,  4500] loss: 0.576
34.93266701698303
[1,  5000] loss: 0.576
38.7926459312439
[1,  5500] loss: 0.576
42.653878927230835
[1,  6000] loss: 0.576
46.51370334625244
[1,  6500] loss: 0.575
50.38753128051758
[1,  7000] loss: 0.576
54.2613787651062
[1,  7500] loss: 0.576
58.13061165809631
[1,  8000] loss: 0.576
61.99040961265564
[1,  8500] loss: 0.576
65.8463659286499
[1,  9000] loss: 0.576
69.71465277671814
[1,  9500] loss: 0.576
73.57856464385986
[1, 10000] loss: 0.576
77.44739961624146
[1, 10500] loss: 0.576
81.31776905059814
[1, 11000] loss: 0.576
85.19025778770447
[1, 11500] loss: 0.576
89.05113482475281
[1, 12000] loss: 0.576
92.90807008743286
[1, 12500] loss: 0.576
96.76245665550232
[2,   500] loss: 0.576
100.71663165092468
[2,  1000] loss: 0.576
104.58464789390564
[2,  1500] loss: 0.576
108.5105881690979
[2,  2000] loss: 0.576
112.3775794506073
[2,  2500] loss: 0.576
116.2479989528656
[2,  3000] loss: 0.576
120.12363719940186
[2,  3500] loss: 0.575
123.99737119674683
[2,  4000] loss: 0.576
127.86962962150574
[2,  4500] loss: 0.576
131.74325442314148
[2,  5000] loss: 0.576
135.6176402568817
[2,  5500] loss: 0.576
139.48954224586487
[2,  6000] loss: 0.575
143.35999655723572
[2,  6500] loss: 0.576
147.245671749115
[2,  7000] loss: 0.576
151.1250410079956
[2,  7500] loss: 0.576
154.99037718772888
[2,  8000] loss: 0.575
158.86946153640747
[2,  8500] loss: 0.576
162.74092555046082
[2,  9000] loss: 0.576
166.60467386245728
[2,  9500] loss: 0.576
170.47053742408752
[2, 10000] loss: 0.576
174.3371706008911
[2, 10500] loss: 0.576
178.20705819129944
[2, 11000] loss: 0.576
182.068350315094
[2, 11500] loss: 0.576
185.92866945266724
[2, 12000] loss: 0.576
189.78576469421387
[2, 12500] loss: 0.576
193.65912532806396
[3,   500] loss: 0.576
197.6465299129486
[3,  1000] loss: 0.576
201.51997923851013
[3,  1500] loss: 0.576
205.4086663722992
[3,  2000] loss: 0.576
209.3033525943756
[3,  2500] loss: 0.576
213.18088102340698
[3,  3000] loss: 0.576
217.06803846359253
[3,  3500] loss: 0.575
220.9378137588501
[3,  4000] loss: 0.576
224.80578017234802
[3,  4500] loss: 0.576
228.67229914665222
[3,  5000] loss: 0.575
232.5510425567627
[3,  5500] loss: 0.576
236.42087244987488
[3,  6000] loss: 0.576
240.29420971870422
[3,  6500] loss: 0.576
244.16309762001038
[3,  7000] loss: 0.576
248.0299367904663
[3,  7500] loss: 0.576
251.89674949645996
[3,  8000] loss: 0.576
255.75479817390442
[3,  8500] loss: 0.576
259.6216354370117
[3,  9000] loss: 0.576
263.50891041755676
[3,  9500] loss: 0.576
267.39769315719604
[3, 10000] loss: 0.576
271.27581906318665
[3, 10500] loss: 0.576
275.14829897880554
[3, 11000] loss: 0.576
279.0191652774811
[3, 11500] loss: 0.576
282.88532423973083
[3, 12000] loss: 0.576
286.75438833236694
[3, 12500] loss: 0.576
290.61901569366455
[4,   500] loss: 0.576
294.59180974960327
[4,  1000] loss: 0.576
298.4579985141754
[4,  1500] loss: 0.576
302.3329861164093
[4,  2000] loss: 0.576
306.2064805030823
[4,  2500] loss: 0.576
310.0938277244568
[4,  3000] loss: 0.576
313.96312165260315
[4,  3500] loss: 0.576
317.8336589336395
[4,  4000] loss: 0.575
321.711314201355
[4,  4500] loss: 0.576
325.5879683494568
[4,  5000] loss: 0.576
329.4524965286255
[4,  5500] loss: 0.576
333.3380091190338
[4,  6000] loss: 0.576
337.20080518722534
[4,  6500] loss: 0.576
341.0619282722473
[4,  7000] loss: 0.576
344.9236969947815
[4,  7500] loss: 0.576
348.7960901260376
[4,  8000] loss: 0.575
352.67336440086365
[4,  8500] loss: 0.576
356.5456988811493
[4,  9000] loss: 0.576
360.42140650749207
[4,  9500] loss: 0.576
364.31184363365173
[4, 10000] loss: 0.576
368.19005489349365
[4, 10500] loss: 0.576
372.12542247772217
[4, 11000] loss: 0.575
376.0009968280792
[4, 11500] loss: 0.576
379.8687753677368
[4, 12000] loss: 0.576
383.74861574172974
[4, 12500] loss: 0.576
387.62062764167786
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[ 1.6843e-03, -1.7075e-03, -9.3981e-03,  1.9393e-02, -2.6854e-02,
          1.9792e-02,  1.8377e-02,  2.1206e-02, -1.1018e-02, -1.4650e-02],
        [-1.8807e-02, -2.7107e-03,  5.3090e-02,  2.5237e-02, -3.1198e-02,
          5.6225e-02,  1.1052e-01, -2.9648e-02, -3.3465e-03, -3.3319e-05],
        [ 2.2317e-02, -2.1878e-02,  2.9541e-03,  1.9800e-02,  2.3623e-03,
          4.0239e-02,  4.5745e-02,  2.8146e-02, -5.8644e-02, -4.5939e-02],
        [-1.4701e-02, -4.8407e-02, -3.3394e-02,  1.9401e-02, -5.0337e-02,
         -1.4139e-02,  3.6585e-02,  2.6108e-02, -1.4680e-02, -1.1902e-02]],
       device='cuda:0', grad_fn=<AddmmBackward>)
Predicted:  horse  frog  frog  frog
Accuracy of the network on the 4000.0 test images: 10 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 26, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=26, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
 frog horse  bird  ship
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model vgg11_bn Loaded
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (6): ReLU(inplace=True)
    (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (10): ReLU(inplace=True)
    (11): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (12): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (13): ReLU(inplace=True)
    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (15): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (16): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (17): ReLU(inplace=True)
    (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (19): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (20): ReLU(inplace=True)
    (21): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (22): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (23): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (24): ReLU(inplace=True)
    (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (26): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (27): ReLU(inplace=True)
    (28): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581705382.0790377
[1,   500] loss: 0.641
4.514699220657349
[1,  1000] loss: 0.629
9.016117811203003
[1,  1500] loss: 0.637
13.367521047592163
[1,  2000] loss: 0.645
17.60054087638855
[1,  2500] loss: 0.640
21.881404399871826
[1,  3000] loss: 0.637
26.097888946533203
[1,  3500] loss: 0.636
30.32905864715576
[1,  4000] loss: 0.633
34.5917227268219
[1,  4500] loss: 0.639
38.869473457336426
[1,  5000] loss: 0.625
43.12400960922241
[1,  5500] loss: 0.640
47.358620405197144
[1,  6000] loss: 0.637
51.596309185028076
[1,  6500] loss: 0.636
55.85459852218628
[1,  7000] loss: 0.635
60.08313870429993
[1,  7500] loss: 0.640
64.31781697273254
[1,  8000] loss: 0.646
68.54233050346375
[1,  8500] loss: 0.638
72.76653981208801
[1,  9000] loss: 0.634
77.01359462738037
[1,  9500] loss: 0.639
81.25337886810303
[1, 10000] loss: 0.637
85.55262303352356
[1, 10500] loss: 0.641
89.78128337860107
[1, 11000] loss: 0.640
94.03125643730164
[1, 11500] loss: 0.632
98.32499361038208
[1, 12000] loss: 0.641
102.56290578842163
[1, 12500] loss: 0.637
106.7751693725586
[2,   500] loss: 0.635
111.07948923110962
[2,  1000] loss: 0.635
115.29399681091309
[2,  1500] loss: 0.639
119.53490161895752
[2,  2000] loss: 0.635
123.73857498168945
[2,  2500] loss: 0.643
128.019056558609
[2,  3000] loss: 0.639
132.25370812416077
[2,  3500] loss: 0.636
136.473237991333
[2,  4000] loss: 0.644
140.6912603378296
[2,  4500] loss: 0.643
144.92794585227966
[2,  5000] loss: 0.638
149.18805527687073
[2,  5500] loss: 0.634
153.43297505378723
[2,  6000] loss: 0.635
157.70526814460754
[2,  6500] loss: 0.638
161.9647147655487
[2,  7000] loss: 0.639
166.20958757400513
[2,  7500] loss: 0.635
170.44439697265625
[2,  8000] loss: 0.638
174.6799693107605
[2,  8500] loss: 0.630
178.89877200126648
[2,  9000] loss: 0.639
183.09968447685242
[2,  9500] loss: 0.632
187.30337977409363
[2, 10000] loss: 0.636
191.5082676410675
[2, 10500] loss: 0.635
195.72953534126282
[2, 11000] loss: 0.637
199.94322991371155
[2, 11500] loss: 0.631
204.1846330165863
[2, 12000] loss: 0.638
208.3971221446991
[2, 12500] loss: 0.643
212.61795711517334
[3,   500] loss: 0.643
216.95844411849976
[3,  1000] loss: 0.639
221.2242796421051
[3,  1500] loss: 0.638
225.47214651107788
[3,  2000] loss: 0.639
229.70019483566284
[3,  2500] loss: 0.635
233.93410062789917
[3,  3000] loss: 0.636
238.16928052902222
[3,  3500] loss: 0.638
242.40170979499817
[3,  4000] loss: 0.634
246.62345337867737
[3,  4500] loss: 0.640
250.83283519744873
[3,  5000] loss: 0.640
255.06090641021729
[3,  5500] loss: 0.633
259.26940989494324
[3,  6000] loss: 0.637
263.5156280994415
[3,  6500] loss: 0.638
267.8353726863861
[3,  7000] loss: 0.640
272.08682775497437
[3,  7500] loss: 0.637
276.31990361213684
[3,  8000] loss: 0.639
280.5966374874115
[3,  8500] loss: 0.630
284.81868386268616
[3,  9000] loss: 0.630
289.0745565891266
[3,  9500] loss: 0.635
293.33883595466614
[3, 10000] loss: 0.640
297.6251606941223
[3, 10500] loss: 0.638
301.86569261550903
[3, 11000] loss: 0.636
306.14059138298035
[3, 11500] loss: 0.639
310.5908155441284
[3, 12000] loss: 0.637
314.8743209838867
[3, 12500] loss: 0.639
319.16604566574097
[4,   500] loss: 0.642
323.59956550598145
[4,  1000] loss: 0.636
327.9052560329437
[4,  1500] loss: 0.642
332.22864747047424
[4,  2000] loss: 0.643
336.52050256729126
[4,  2500] loss: 0.644
340.9708013534546
[4,  3000] loss: 0.636
345.2569921016693
[4,  3500] loss: 0.635
349.5386555194855
[4,  4000] loss: 0.636
353.91813802719116
[4,  4500] loss: 0.629
358.2180209159851
[4,  5000] loss: 0.635
362.46140122413635
[4,  5500] loss: 0.644
366.76018381118774
[4,  6000] loss: 0.640
371.04399251937866
[4,  6500] loss: 0.637
375.32362365722656
[4,  7000] loss: 0.642
379.6612660884857
[4,  7500] loss: 0.641
384.0046167373657
[4,  8000] loss: 0.634
388.3030512332916
[4,  8500] loss: 0.639
392.5804440975189
[4,  9000] loss: 0.636
396.8785889148712
[4,  9500] loss: 0.645
401.1788594722748
[4, 10000] loss: 0.640
405.4560601711273
[4, 10500] loss: 0.638
409.69771218299866
[4, 11000] loss: 0.636
413.97836089134216
[4, 11500] loss: 0.640
418.26707887649536
[4, 12000] loss: 0.640
422.53061056137085
[4, 12500] loss: 0.637
426.8114490509033
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[ 0.7384,  0.2055, -0.5625,  0.3183,  0.0954, -0.3522, -0.1873,  0.5781,
          0.7103,  0.6595],
        [-0.3199,  0.1359, -0.0121,  0.4476, -0.1938,  0.7731,  0.9854,  0.3171,
          0.7454,  0.0131],
        [-0.3815,  2.4015, -1.8678, -0.2729, -0.0947, -0.1268,  0.5970,  0.0222,
         -1.1347,  0.7762],
        [ 0.4504, -0.1271, -1.4542, -1.4436, -0.4090,  1.0172,  0.8067,  0.1317,
         -0.0566, -0.7010]], device='cuda:0', grad_fn=<AddmmBackward>)
Predicted:  plane  frog   car   dog
Accuracy of the network on the 4000.0 test images: 9 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 27, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=27, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
horse   car horse  frog
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model vgg13 Loaded
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (15): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (16): ReLU(inplace=True)
    (17): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace=True)
    (19): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (20): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): ReLU(inplace=True)
    (22): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (23): ReLU(inplace=True)
    (24): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581705828.7333236
[1,   500] loss: 0.576
4.238711357116699
[1,  1000] loss: 0.576
8.306442737579346
[1,  1500] loss: 0.576
12.401178359985352
[1,  2000] loss: 0.575
16.46359395980835
[1,  2500] loss: 0.575
20.539786338806152
[1,  3000] loss: 0.576
24.599228858947754
[1,  3500] loss: 0.576
28.65870690345764
[1,  4000] loss: 0.576
32.7159526348114
[1,  4500] loss: 0.576
36.779234170913696
[1,  5000] loss: 0.575
40.833962202072144
[1,  5500] loss: 0.576
44.909140825271606
[1,  6000] loss: 0.576
49.097761392593384
[1,  6500] loss: 0.576
53.16752290725708
[1,  7000] loss: 0.576
57.26058077812195
[1,  7500] loss: 0.576
61.3430016040802
[1,  8000] loss: 0.576
65.41445422172546
[1,  8500] loss: 0.576
69.48177289962769
[1,  9000] loss: 0.576
73.55947875976562
[1,  9500] loss: 0.576
77.62449908256531
[1, 10000] loss: 0.576
81.68539547920227
[1, 10500] loss: 0.576
85.74336218833923
[1, 11000] loss: 0.576
89.80865383148193
[1, 11500] loss: 0.576
93.87186217308044
[1, 12000] loss: 0.576
97.92989110946655
[1, 12500] loss: 0.576
102.03425812721252
[2,   500] loss: 0.576
106.19388365745544
[2,  1000] loss: 0.576
110.28970336914062
[2,  1500] loss: 0.576
114.35173845291138
[2,  2000] loss: 0.576
118.42803144454956
[2,  2500] loss: 0.576
122.50281190872192
[2,  3000] loss: 0.576
126.56704592704773
[2,  3500] loss: 0.576
130.65097188949585
[2,  4000] loss: 0.576
134.7338261604309
[2,  4500] loss: 0.576
138.81924867630005
[2,  5000] loss: 0.576
142.8834822177887
[2,  5500] loss: 0.576
146.95288372039795
[2,  6000] loss: 0.576
151.0377378463745
[2,  6500] loss: 0.576
155.0958423614502
[2,  7000] loss: 0.576
159.15522742271423
[2,  7500] loss: 0.575
163.24500679969788
[2,  8000] loss: 0.576
167.3109028339386
[2,  8500] loss: 0.576
171.3845694065094
[2,  9000] loss: 0.576
175.4401204586029
[2,  9500] loss: 0.576
179.51020121574402
[2, 10000] loss: 0.576
183.58857226371765
[2, 10500] loss: 0.576
187.65376949310303
[2, 11000] loss: 0.576
191.73602867126465
[2, 11500] loss: 0.576
195.83587956428528
[2, 12000] loss: 0.576
199.89346194267273
[2, 12500] loss: 0.576
203.9389591217041
[3,   500] loss: 0.576
208.11679339408875
[3,  1000] loss: 0.576
212.20500445365906
[3,  1500] loss: 0.576
216.27468872070312
[3,  2000] loss: 0.576
220.3451223373413
[3,  2500] loss: 0.576
224.40362071990967
[3,  3000] loss: 0.576
228.47526502609253
[3,  3500] loss: 0.576
232.53624844551086
[3,  4000] loss: 0.576
236.59519124031067
[3,  4500] loss: 0.576
240.6501772403717
[3,  5000] loss: 0.576
244.7092719078064
[3,  5500] loss: 0.576
248.8362591266632
[3,  6000] loss: 0.576
252.91374397277832
[3,  6500] loss: 0.576
257.0145585536957
[3,  7000] loss: 0.576
261.0712299346924
[3,  7500] loss: 0.576
265.126259803772
[3,  8000] loss: 0.576
269.18067359924316
[3,  8500] loss: 0.576
273.2247111797333
[3,  9000] loss: 0.576
277.27538204193115
[3,  9500] loss: 0.576
281.31342124938965
[3, 10000] loss: 0.575
285.3492228984833
[3, 10500] loss: 0.576
289.40726494789124
[3, 11000] loss: 0.576
293.4496304988861
[3, 11500] loss: 0.576
297.4975004196167
[3, 12000] loss: 0.576
301.57598066329956
[3, 12500] loss: 0.576
305.6239650249481
[4,   500] loss: 0.576
309.75252175331116
[4,  1000] loss: 0.576
313.80604243278503
[4,  1500] loss: 0.576
317.86094999313354
[4,  2000] loss: 0.576
321.9005947113037
[4,  2500] loss: 0.576
325.9442298412323
[4,  3000] loss: 0.576
329.97788548469543
[4,  3500] loss: 0.576
334.01004338264465
[4,  4000] loss: 0.576
338.05102276802063
[4,  4500] loss: 0.576
342.08446884155273
[4,  5000] loss: 0.576
346.1286344528198
[4,  5500] loss: 0.576
350.16136717796326
[4,  6000] loss: 0.576
354.2115454673767
[4,  6500] loss: 0.576
358.2664542198181
[4,  7000] loss: 0.576
362.3114709854126
[4,  7500] loss: 0.576
366.3525755405426
[4,  8000] loss: 0.576
370.44891929626465
[4,  8500] loss: 0.576
374.5026216506958
[4,  9000] loss: 0.576
378.5376923084259
[4,  9500] loss: 0.576
382.5631036758423
[4, 10000] loss: 0.576
386.6081702709198
[4, 10500] loss: 0.576
390.63733291625977
[4, 11000] loss: 0.576
394.6762912273407
[4, 11500] loss: 0.576
398.70524430274963
[4, 12000] loss: 0.576
402.7390627861023
[4, 12500] loss: 0.576
406.7770357131958
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[ 0.0106,  0.0113, -0.0236, -0.0457, -0.0183, -0.0139,  0.0197, -0.0029,
          0.0361, -0.0049],
        [-0.0383,  0.0240,  0.0196, -0.0520,  0.0155, -0.0473,  0.0216,  0.0060,
          0.0334,  0.0079],
        [-0.0146, -0.0062, -0.0117, -0.0292,  0.0030, -0.0246,  0.0465, -0.0143,
          0.0274, -0.0585],
        [-0.0333, -0.0158,  0.0197, -0.0678, -0.0021,  0.0337,  0.0301,  0.0086,
         -0.0269,  0.0045]], device='cuda:0', grad_fn=<AddmmBackward>)
Predicted:   ship  ship  frog   dog
Accuracy of the network on the 4000.0 test images: 9 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 28, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=28, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
  cat truck  ship  bird
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model vgg13_bn Loaded
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (21): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (23): ReLU(inplace=True)
    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (26): ReLU(inplace=True)
    (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (30): ReLU(inplace=True)
    (31): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (32): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (33): ReLU(inplace=True)
    (34): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581706254.1131258
[1,   500] loss: 1.797
5.037661552429199
[1,  1000] loss: 1.794
9.92018175125122
[1,  1500] loss: 1.791
14.709771633148193
[1,  2000] loss: 1.794
19.418639421463013
[1,  2500] loss: 1.795
24.0811505317688
[1,  3000] loss: 1.785
28.711318254470825
[1,  3500] loss: 1.790
33.372602224349976
[1,  4000] loss: 1.790
38.060579776763916
[1,  4500] loss: 1.797
42.74277687072754
[1,  5000] loss: 1.786
47.418073892593384
[1,  5500] loss: 1.789
52.09911322593689
[1,  6000] loss: 1.794
56.804267168045044
[1,  6500] loss: 1.793
61.50248670578003
[1,  7000] loss: 1.782
66.20324444770813
[1,  7500] loss: 1.790
70.90250658988953
[1,  8000] loss: 1.781
75.5772294998169
[1,  8500] loss: 1.788
80.23925113677979
[1,  9000] loss: 1.787
84.92541599273682
[1,  9500] loss: 1.793
89.57501721382141
[1, 10000] loss: 1.793
94.22584056854248
[1, 10500] loss: 1.793
98.89067101478577
[1, 11000] loss: 1.795
103.56366729736328
[1, 11500] loss: 1.786
108.24684715270996
[1, 12000] loss: 1.786
112.9184935092926
[1, 12500] loss: 1.791
117.59055256843567
[2,   500] loss: 1.782
122.36660313606262
[2,  1000] loss: 1.791
127.07245993614197
[2,  1500] loss: 1.788
131.77255773544312
[2,  2000] loss: 1.784
136.47129607200623
[2,  2500] loss: 1.791
141.16050839424133
[2,  3000] loss: 1.791
145.86990094184875
[2,  3500] loss: 1.792
150.55777215957642
[2,  4000] loss: 1.785
155.24192428588867
[2,  4500] loss: 1.789
159.93557929992676
[2,  5000] loss: 1.784
164.62882447242737
[2,  5500] loss: 1.793
169.35788083076477
[2,  6000] loss: 1.793
174.04831838607788
[2,  6500] loss: 1.796
178.7635338306427
[2,  7000] loss: 1.795
183.44109964370728
[2,  7500] loss: 1.793
188.15110397338867
[2,  8000] loss: 1.795
192.83014130592346
[2,  8500] loss: 1.791
197.53306341171265
[2,  9000] loss: 1.788
202.22547721862793
[2,  9500] loss: 1.795
206.89743494987488
[2, 10000] loss: 1.793
211.5971863269806
[2, 10500] loss: 1.792
216.2771818637848
[2, 11000] loss: 1.791
220.95825624465942
[2, 11500] loss: 1.795
225.65897512435913
[2, 12000] loss: 1.796
230.3925769329071
[2, 12500] loss: 1.791
235.14042115211487
[3,   500] loss: 1.788
239.9295313358307
[3,  1000] loss: 1.787
244.59936094284058
[3,  1500] loss: 1.782
249.26955819129944
[3,  2000] loss: 1.792
253.9550392627716
[3,  2500] loss: 1.789
258.6228563785553
[3,  3000] loss: 1.797
263.31308007240295
[3,  3500] loss: 1.792
268.0797357559204
[3,  4000] loss: 1.787
272.78567123413086
[3,  4500] loss: 1.790
277.4849066734314
[3,  5000] loss: 1.780
282.1898398399353
[3,  5500] loss: 1.783
286.885107755661
[3,  6000] loss: 1.792
291.5955722332001
[3,  6500] loss: 1.789
296.30424547195435
[3,  7000] loss: 1.789
301.116738319397
[3,  7500] loss: 1.796
305.8259642124176
[3,  8000] loss: 1.791
310.56074047088623
[3,  8500] loss: 1.789
315.28614258766174
[3,  9000] loss: 1.789
319.9820806980133
[3,  9500] loss: 1.786
324.66612792015076
[3, 10000] loss: 1.787
329.32906317710876
[3, 10500] loss: 1.793
333.9787621498108
[3, 11000] loss: 1.786
338.64975094795227
[3, 11500] loss: 1.785
343.3094720840454
[3, 12000] loss: 1.795
347.9694426059723
[3, 12500] loss: 1.796
352.66446113586426
[4,   500] loss: 1.787
357.43409299850464
[4,  1000] loss: 1.788
362.0937159061432
[4,  1500] loss: 1.783
366.88655281066895
[4,  2000] loss: 1.790
371.58952474594116
[4,  2500] loss: 1.795
376.2788004875183
[4,  3000] loss: 1.787
380.95577907562256
[4,  3500] loss: 1.793
385.62592458724976
[4,  4000] loss: 1.782
390.3320257663727
[4,  4500] loss: 1.793
395.10549783706665
[4,  5000] loss: 1.792
399.770733833313
[4,  5500] loss: 1.794
404.44954013824463
[4,  6000] loss: 1.801
409.16533732414246
[4,  6500] loss: 1.797
413.8515160083771
[4,  7000] loss: 1.790
418.6127769947052
[4,  7500] loss: 1.791
423.3001494407654
[4,  8000] loss: 1.795
427.9849555492401
[4,  8500] loss: 1.785
432.6734142303467
[4,  9000] loss: 1.784
437.3482201099396
[4,  9500] loss: 1.798
442.0527513027191
[4, 10000] loss: 1.793
446.7222101688385
[4, 10500] loss: 1.785
451.37414264678955
[4, 11000] loss: 1.792
456.03960394859314
[4, 11500] loss: 1.784
460.6743242740631
[4, 12000] loss: 1.794
465.35667753219604
[4, 12500] loss: 1.792
470.0419063568115
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[-0.1240, -0.8741,  0.1794,  ..., -0.0836,  0.9335, -0.8149],
        [-0.4369,  0.6337,  1.5063,  ..., -0.7371, -1.3021, -0.7654],
        [-0.6581, -0.4917,  1.2427,  ..., -0.4704,  0.0860, -0.8240],
        [-0.6826,  0.2329,  0.0655,  ..., -1.8090, -0.7033, -0.2513]],
       device='cuda:0', grad_fn=<AddmmBackward>)
Traceback (most recent call last):
  File "./main.py", line 339, in <module>
    test(model_names[model_archi])
  File "./main.py", line 248, in test
    for j in range(4)))
  File "./main.py", line 248, in <genexpr>
    for j in range(4)))
IndexError: tuple index out of range
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 29, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=29, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
 bird   dog  ship   cat
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model vgg16 Loaded
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): ReLU(inplace=True)
    (16): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (17): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace=True)
    (19): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (20): ReLU(inplace=True)
    (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (22): ReLU(inplace=True)
    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (24): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (25): ReLU(inplace=True)
    (26): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (27): ReLU(inplace=True)
    (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (29): ReLU(inplace=True)
    (30): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581706734.2936268
[1,   500] loss: 1.726
4.801527738571167
[1,  1000] loss: 1.726
9.500258684158325
[1,  1500] loss: 1.726
14.170501232147217
[1,  2000] loss: 1.726
18.8406503200531
[1,  2500] loss: 1.726
23.506084203720093
[1,  3000] loss: 1.726
28.154279470443726
[1,  3500] loss: 1.726
32.818262577056885
[1,  4000] loss: 1.726
37.466150522232056
[1,  4500] loss: 1.726
42.128443241119385
[1,  5000] loss: 1.726
46.78179979324341
[1,  5500] loss: 1.726
51.443827629089355
[1,  6000] loss: 1.726
56.10303997993469
[1,  6500] loss: 1.726
60.75757956504822
[1,  7000] loss: 1.726
65.4126946926117
[1,  7500] loss: 1.726
70.0843186378479
[1,  8000] loss: 1.726
74.75775289535522
[1,  8500] loss: 1.726
79.4286413192749
[1,  9000] loss: 1.726
84.09404301643372
[1,  9500] loss: 1.726
88.77268695831299
[1, 10000] loss: 1.726
93.44784832000732
[1, 10500] loss: 1.726
98.10595107078552
[1, 11000] loss: 1.726
102.78064155578613
[1, 11500] loss: 1.726
107.43100214004517
[1, 12000] loss: 1.726
112.09007859230042
[1, 12500] loss: 1.726
116.75461483001709
[2,   500] loss: 1.726
121.5138807296753
[2,  1000] loss: 1.726
126.19399857521057
[2,  1500] loss: 1.726
130.87627387046814
[2,  2000] loss: 1.726
135.5878303050995
[2,  2500] loss: 1.726
140.25456643104553
[2,  3000] loss: 1.726
144.9312584400177
[2,  3500] loss: 1.726
149.596045255661
[2,  4000] loss: 1.726
154.26932191848755
[2,  4500] loss: 1.726
158.93314361572266
[2,  5000] loss: 1.726
163.60936331748962
[2,  5500] loss: 1.726
168.2837245464325
[2,  6000] loss: 1.726
172.96354341506958
[2,  6500] loss: 1.726
177.63913941383362
[2,  7000] loss: 1.726
182.29931950569153
[2,  7500] loss: 1.726
186.97763991355896
[2,  8000] loss: 1.726
191.65744590759277
[2,  8500] loss: 1.726
196.33285570144653
[2,  9000] loss: 1.726
200.99224019050598
[2,  9500] loss: 1.726
205.6648280620575
[2, 10000] loss: 1.726
210.32785201072693
[2, 10500] loss: 1.726
214.9952666759491
[2, 11000] loss: 1.726
219.6656527519226
[2, 11500] loss: 1.726
224.39658403396606
[2, 12000] loss: 1.726
229.0796537399292
[2, 12500] loss: 1.726
233.7262842655182
[3,   500] loss: 1.726
238.46974301338196
[3,  1000] loss: 1.726
243.11376905441284
[3,  1500] loss: 1.726
247.7669382095337
[3,  2000] loss: 1.726
252.42905163764954
[3,  2500] loss: 1.726
257.09481930732727
[3,  3000] loss: 1.726
261.75914788246155
[3,  3500] loss: 1.726
266.44097447395325
[3,  4000] loss: 1.726
271.1306257247925
[3,  4500] loss: 1.726
275.8327865600586
[3,  5000] loss: 1.726
280.5022699832916
[3,  5500] loss: 1.726
285.1769268512726
[3,  6000] loss: 1.726
289.8541395664215
[3,  6500] loss: 1.726
294.54775071144104
[3,  7000] loss: 1.726
299.22597312927246
[3,  7500] loss: 1.726
303.90066623687744
[3,  8000] loss: 1.726
308.58772826194763
[3,  8500] loss: 1.726
313.33763337135315
[3,  9000] loss: 1.726
318.03706073760986
[3,  9500] loss: 1.726
322.73490047454834
[3, 10000] loss: 1.726
327.42002177238464
[3, 10500] loss: 1.726
332.0877032279968
[3, 11000] loss: 1.726
336.77619075775146
[3, 11500] loss: 1.726
341.49562764167786
[3, 12000] loss: 1.726
346.1948525905609
[3, 12500] loss: 1.726
350.883446931839
[4,   500] loss: 1.726
355.69509649276733
[4,  1000] loss: 1.726
360.3786404132843
[4,  1500] loss: 1.726
365.099463224411
[4,  2000] loss: 1.726
369.79587292671204
[4,  2500] loss: 1.726
374.4905939102173
[4,  3000] loss: 1.726
379.167680978775
[4,  3500] loss: 1.726
383.8582046031952
[4,  4000] loss: 1.726
388.53973937034607
[4,  4500] loss: 1.726
393.2249948978424
[4,  5000] loss: 1.726
397.898309469223
[4,  5500] loss: 1.726
402.5801305770874
[4,  6000] loss: 1.726
407.273389339447
[4,  6500] loss: 1.726
411.967960357666
[4,  7000] loss: 1.726
416.64699482917786
[4,  7500] loss: 1.726
421.3272523880005
[4,  8000] loss: 1.726
426.017103433609
[4,  8500] loss: 1.726
430.733172416687
[4,  9000] loss: 1.726
435.43881011009216
[4,  9500] loss: 1.726
440.13017296791077
[4, 10000] loss: 1.726
444.8186752796173
[4, 10500] loss: 1.726
449.5095326900482
[4, 11000] loss: 1.726
454.19270944595337
[4, 11500] loss: 1.726
458.8899562358856
[4, 12000] loss: 1.726
463.5871500968933
[4, 12500] loss: 1.726
468.26559710502625
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[ 1.1820e-02, -9.3951e-03,  3.9353e-02,  ..., -1.1514e-02,
          1.7991e-03,  1.1422e-02],
        [ 7.6682e-03, -2.7154e-02,  1.3484e-02,  ...,  1.3982e-03,
          2.4503e-06, -6.7395e-03],
        [ 6.4082e-03, -1.4145e-02,  2.5764e-02,  ...,  1.4772e-03,
         -7.1110e-03,  9.2797e-03],
        [-1.1069e-02, -5.2981e-03,  1.8636e-02,  ...,  6.7964e-03,
         -1.2673e-03,  2.4169e-02]], device='cuda:0', grad_fn=<AddmmBackward>)
Traceback (most recent call last):
  File "./main.py", line 339, in <module>
    test(model_names[model_archi])
  File "./main.py", line 248, in test
    for j in range(4)))
  File "./main.py", line 248, in <genexpr>
    for j in range(4)))
IndexError: tuple index out of range
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 1, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=1, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
 deer  deer   cat   dog
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model densenet121 Loaded
DenseNet(
  (features): Sequential(
    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (denseblock1): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition1): _Transition(
      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock2): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition2): _Transition(
      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock3): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer17): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer18): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer19): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer20): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer21): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer22): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer23): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer24): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition3): _Transition(
      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock4): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (classifier): Linear(in_features=1024, out_features=1000, bias=True)
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581707210.4782965
[1,   500] loss: 0.594
30.485018730163574
[1,  1000] loss: 0.597
61.61763024330139
[1,  1500] loss: 0.590
92.6117615699768
[1,  2000] loss: 0.593
122.8339991569519
[1,  2500] loss: 0.593
153.04033589363098
[1,  3000] loss: 0.592
183.3157114982605
[1,  3500] loss: 0.592
213.6131558418274
[1,  4000] loss: 0.592
244.1172902584076
[1,  4500] loss: 0.595
274.8258695602417
[1,  5000] loss: 0.594
304.7191250324249
[1,  5500] loss: 0.597
335.1757900714874
[1,  6000] loss: 0.595
365.55326414108276
[1,  6500] loss: 0.597
395.77726006507874
[1,  7000] loss: 0.593
426.045597076416
[1,  7500] loss: 0.596
456.38337779045105
[1,  8000] loss: 0.594
486.6157102584839
[1,  8500] loss: 0.595
516.5144355297089
[1,  9000] loss: 0.592
546.3440392017365
[1,  9500] loss: 0.596
576.4734609127045
[1, 10000] loss: 0.594
606.4139883518219
[1, 10500] loss: 0.596
636.6918716430664
[1, 11000] loss: 0.590
666.7609632015228
[1, 11500] loss: 0.592
696.9656662940979
[1, 12000] loss: 0.593
727.0209662914276
[1, 12500] loss: 0.591
757.3094258308411
[2,   500] loss: 0.597
787.4577701091766
[2,  1000] loss: 0.592
817.4279191493988
[2,  1500] loss: 0.597
847.4688835144043
[2,  2000] loss: 0.596
877.3379378318787
[2,  2500] loss: 0.596
907.0915248394012
[2,  3000] loss: 0.591
936.5139846801758
[2,  3500] loss: 0.597
966.1529247760773
[2,  4000] loss: 0.592
996.5706722736359
[2,  4500] loss: 0.591
1026.3728249073029
[2,  5000] loss: 0.595
1056.4774346351624
[2,  5500] loss: 0.594
1086.5519087314606
[2,  6000] loss: 0.594
1116.6124920845032
[2,  6500] loss: 0.593
1146.5313379764557
[2,  7000] loss: 0.593
1176.3443639278412
[2,  7500] loss: 0.593
1205.571538925171
[2,  8000] loss: 0.596
1234.9366705417633
[2,  8500] loss: 0.597
1264.6655187606812
[2,  9000] loss: 0.591
1294.5640501976013
[2,  9500] loss: 0.594
1324.4898838996887
[2, 10000] loss: 0.592
1354.4396209716797
[2, 10500] loss: 0.592
1384.5455911159515
[2, 11000] loss: 0.594
1414.9288840293884
[2, 11500] loss: 0.593
1445.0268924236298
[2, 12000] loss: 0.593
1475.1009850502014
[2, 12500] loss: 0.592
1504.8535430431366
[3,   500] loss: 0.593
1535.0062310695648
[3,  1000] loss: 0.592
1564.8058078289032
[3,  1500] loss: 0.593
1594.3399469852448
[3,  2000] loss: 0.593
1623.9808225631714
[3,  2500] loss: 0.594
1653.5165667533875
[3,  3000] loss: 0.596
1683.1405456066132
[3,  3500] loss: 0.592
1713.0501658916473
[3,  4000] loss: 0.593
1742.6810655593872
[3,  4500] loss: 0.590
1772.3686838150024
[3,  5000] loss: 0.592
1801.6967253684998
[3,  5500] loss: 0.596
1831.9137244224548
[3,  6000] loss: 0.595
1861.649734735489
[3,  6500] loss: 0.598
1891.3223476409912
[3,  7000] loss: 0.596
1921.2768561840057
[3,  7500] loss: 0.596
1950.6517033576965
[3,  8000] loss: 0.595
1979.9915180206299
[3,  8500] loss: 0.594
2010.0302364826202
[3,  9000] loss: 0.596
2039.9335854053497
[3,  9500] loss: 0.594
2069.5287370681763
[3, 10000] loss: 0.598
2098.9394624233246
[3, 10500] loss: 0.594
2128.6677119731903
[3, 11000] loss: 0.594
2158.078639984131
[3, 11500] loss: 0.594
2187.460555791855
[3, 12000] loss: 0.596
2217.307915687561
[3, 12500] loss: 0.595
2247.4493408203125
[4,   500] loss: 0.592
2277.4621958732605
[4,  1000] loss: 0.596
2307.7025377750397
[4,  1500] loss: 0.592
2337.455225944519
[4,  2000] loss: 0.597
2368.2148027420044
[4,  2500] loss: 0.598
2399.1581041812897
[4,  3000] loss: 0.593
2430.124752521515
[4,  3500] loss: 0.592
2460.609400033951
[4,  4000] loss: 0.597
2491.733585834503
[4,  4500] loss: 0.595
2522.6969754695892
[4,  5000] loss: 0.600
2554.003351211548
[4,  5500] loss: 0.595
2584.9401948451996
[4,  6000] loss: 0.596
2616.0147910118103
[4,  6500] loss: 0.593
2646.8910360336304
[4,  7000] loss: 0.594
2677.990740776062
[4,  7500] loss: 0.598
2708.7694697380066
[4,  8000] loss: 0.592
2739.7049236297607
[4,  8500] loss: 0.594
2770.7170786857605
[4,  9000] loss: 0.596
2802.039610385895
[4,  9500] loss: 0.594
2833.394326686859
[4, 10000] loss: 0.592
2864.506281852722
[4, 10500] loss: 0.595
2895.5823543071747
[4, 11000] loss: 0.596
2926.508160829544
[4, 11500] loss: 0.595
2957.5518214702606
[4, 12000] loss: 0.597
2988.965565919876
[4, 12500] loss: 0.591
3020.2265481948853
Finished Training
GroundTruth:    cat  ship  ship plane
Sending data to GPU
Sending model to GPU
tensor([[-0.1757, -0.1080, -0.1312,  0.1695,  0.6162,  0.6067, -0.7364,  0.2460,
          0.1672, -0.0716],
        [-0.1768,  0.7552,  0.2374, -0.5459,  0.1358,  0.0618,  0.1486,  0.3477,
         -0.0968,  0.3242],
        [ 0.0052, -0.6053,  0.3762,  0.1232,  0.5381,  0.6750,  0.2678, -0.4495,
          0.0036,  0.7644],
        [-0.2019, -0.1742,  0.2008,  0.0588,  0.6742,  0.3851, -0.5105,  0.3379,
          0.6732, -0.1122]], device='cuda:0', grad_fn=<AddmmBackward>)
Predicted:   deer   car truck  deer
Accuracy of the network on the 4000.0 test images: 11 %
{'use_cuda': True, 'peregrine': True, 'include_visuals': False, 'normalise': False, 'load_from_memory': False, 'pretrain': False, 'batch_size': 4, 'workers': 2, 'model_archi': 2, 'trainset_size': 20000, 'epochs': 4, 'learning_rate': 0.001, 'momentum': 0.9}
Namespace(batch_size=4, epochs=4, include_visuals=False, learning_rate=0.001, load_from_memory=False, model_archi=2, momentum=0.9, normalise=False, peregrine=True, pretrain=False, trainset_size=20000, use_cuda=True, workers=2)
Files already downloaded and verified
Files already downloaded and verified
cuda:0
12500
 deer  deer   dog   cat
['alexnet', 'densenet121', 'densenet161', 'densenet169', 'densenet201', 'googlenet', 'inception_v3', 'mnasnet0_5', 'mnasnet0_75', 'mnasnet1_0', 'mnasnet1_3', 'mobilenet_v2', 'resnet101', 'resnet152', 'resnet18', 'resnet34', 'resnet50', 'resnext101_32x8d', 'resnext50_32x4d', 'shufflenet_v2_x0_5', 'shufflenet_v2_x1_0', 'shufflenet_v2_x1_5', 'shufflenet_v2_x2_0', 'squeezenet1_0', 'squeezenet1_1', 'vgg11', 'vgg11_bn', 'vgg13', 'vgg13_bn', 'vgg16', 'vgg16_bn', 'vgg19', 'vgg19_bn', 'wide_resnet101_2', 'wide_resnet50_2']
Model densenet161 Loaded
DenseNet(
  (features): Sequential(
    (conv0): Conv2d(3, 96, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (norm0): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace=True)
    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (denseblock1): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(96, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(144, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(240, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(336, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition1): _Transition(
      (norm): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock2): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(192, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(240, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(288, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(336, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(336, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(432, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(432, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(528, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(624, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(720, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(720, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition2): _Transition(
      (norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(768, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock3): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(384, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(432, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(432, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(480, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(528, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(576, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(624, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(624, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(720, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(720, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(816, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(864, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(912, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(912, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(960, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(1008, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1008, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(1056, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1056, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(1104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1104, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer17): _DenseLayer(
        (norm1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer18): _DenseLayer(
        (norm1): BatchNorm2d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1200, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer19): _DenseLayer(
        (norm1): BatchNorm2d(1248, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1248, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer20): _DenseLayer(
        (norm1): BatchNorm2d(1296, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1296, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer21): _DenseLayer(
        (norm1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1344, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer22): _DenseLayer(
        (norm1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1392, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer23): _DenseLayer(
        (norm1): BatchNorm2d(1440, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1440, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer24): _DenseLayer(
        (norm1): BatchNorm2d(1488, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1488, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer25): _DenseLayer(
        (norm1): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1536, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer26): _DenseLayer(
        (norm1): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1584, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer27): _DenseLayer(
        (norm1): BatchNorm2d(1632, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1632, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer28): _DenseLayer(
        (norm1): BatchNorm2d(1680, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1680, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer29): _DenseLayer(
        (norm1): BatchNorm2d(1728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1728, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer30): _DenseLayer(
        (norm1): BatchNorm2d(1776, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1776, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer31): _DenseLayer(
        (norm1): BatchNorm2d(1824, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1824, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer32): _DenseLayer(
        (norm1): BatchNorm2d(1872, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1872, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer33): _DenseLayer(
        (norm1): BatchNorm2d(1920, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1920, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer34): _DenseLayer(
        (norm1): BatchNorm2d(1968, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1968, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer35): _DenseLayer(
        (norm1): BatchNorm2d(2016, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(2016, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer36): _DenseLayer(
        (norm1): BatchNorm2d(2064, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(2064, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition3): _Transition(
      (norm): BatchNorm2d(2112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv): Conv2d(2112, 1056, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock4): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(1056, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1056, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(1104, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1104, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(1200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1200, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(1248, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1248, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(1296, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1296, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1344, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(1392, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1392, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(1440, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1440, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(1488, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1488, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1536, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(1584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1584, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(1632, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1632, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(1680, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1680, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(1728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1728, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(1776, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1776, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer17): _DenseLayer(
        (norm1): BatchNorm2d(1824, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1824, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer18): _DenseLayer(
        (norm1): BatchNorm2d(1872, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1872, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer19): _DenseLayer(
        (norm1): BatchNorm2d(1920, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1920, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer20): _DenseLayer(
        (norm1): BatchNorm2d(1968, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(1968, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer21): _DenseLayer(
        (norm1): BatchNorm2d(2016, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(2016, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer22): _DenseLayer(
        (norm1): BatchNorm2d(2064, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(2064, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer23): _DenseLayer(
        (norm1): BatchNorm2d(2112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(2112, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer24): _DenseLayer(
        (norm1): BatchNorm2d(2160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(2160, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(192, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (norm5): BatchNorm2d(2208, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (classifier): Linear(in_features=2208, out_features=1000, bias=True)
)
Sending model to GPU
0.001
Defined Optimizer
Starting Training at 1581710306.4251113
